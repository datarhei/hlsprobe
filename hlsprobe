#!/usr/bin/env python2
# -*- mode:python; coding:utf-8 -*-
#
# ॐ तारे तुत्तारे तुरे स्व
"""
HLS Prober for 451 Fahrenheit mediaserver.
Author: Alexander I.Grafov (Axel) <grafov@gmail.com>
This utility licensed under GPL v3.

Uses https://pypi.python.org/pypi/m3u8 for M3U8 playlists parsing.
Scripted in Python2 because m3u8 lib still don't work under Python3.
"""
__version__ = "0.4"

import sys
import os
import random
import time
import signal
import logging
import urllib2
import smtplib
import m3u8
import yaml
import optparse
import urlparse
import socket
from email.mime.text import MIMEText
from multiprocessing import Process, Queue
from subprocess import check_output #, call, Popen, PIPE
from pprint import pprint

CONFIG = "~/.hlsproberc"


class CupertinoProbe:
    """ Parse variant and stream M3U8-playlists. Parser uses python `m3u8` library.
    Get playlist URLs from the task queue.
    """
    def __init__(self, conf, playlistq, chunkq, bugq, pno, log):
        """ Initialized with `conf` config, `playlistq` playlist queue,
        `chunkq` chunk queje, `bugq` bug queue, `pno` prober instance number
        and `log` logger object.
        """
        self.conf = conf
        self.playlistq = playlistq
        self.chunkq = chunkq
        self.bugq = bugq
        self.err = ErrContainer(bugq)
        self.pno = pno
        self.log = log

    def __call__(self):
        """ Read and parse a playlist."""
        while True:
            try:
                group, name, uri = self.playlistq.get(True)
                try:
                    resp = urllib2.urlopen(uri, timeout=self.conf["timeout"]["read"])
                except urllib2.URLError:
                    self.log.warn("Failed to open (%s) %s stream" % (group, uri))
                    self.err("open", "stream", group, name, uri)
                    continue
                except socket.timeout:
                    self.log.warn("Timeout occurs on (%s) %s stream" % (group, uri))
                    self.err("timeout", "stream", group, name, uri)
                    continue
                # Check for client error or server error
                status = resp.getcode()
                if status >= 400:
                    self.log.warn("Bad status %s for (%s) %s stream" % (status, group, uri))
                    self.err("status", "stream", group, name, uri, status)
                    continue
                rawdata = resp.read()
                resp.close()
                try:
                    playlist = m3u8.loads(rawdata)
                    baseuri = base_uri(uri)
                except:
                    self.log.warn("Failed to parse (%s) %s stream" % (group, uri))
                    self.err("parsing", "stream", group, name, uri)
                    continue
                self.log.debug("Load playlist from %s %s" % (group, uri))
                time.sleep(self.conf["sleep"]["playlist-open"])
                if playlist.is_variant:
                    if not playlist.playlists:
                        self.err("empty", "variant", group, name, uri)
                    # Load stream playlists and put them back to playlist queue
                    for stream in playlist.playlists:
                        while self.playlistq.full():
                            self.log.debug("Playlist queue is full (%d). Probably you need to increase number of stream probers. Check `workers/stream-probers` value." % self.playlistq.qsize())
                            time.sleep(3)
                        if stream.uri.startswith("http"):
                            self.playlistq.put((group, name, stream.uri))
                        else:
                            self.playlistq.put((group, name, "%s/%s" % (baseuri, stream.uri)))
                else:
                    if not playlist.segments:
                        self.err("empty", "chunklist", group, name, uri)
                    # Load URLs to media chunks and put them to chunk queue
                    for seg in playlist.segments:
                        while self.chunkq.full():
                            self.log.debug("Chunk queue is full (%d). Probably you need to increase number of media probers. Check `workers/media-probers` value." % self.chunkq.qsize())
                            time.sleep(3)
                        self.chunkq.put((time.time(), group, name, "%s/%s" % (baseuri, seg.uri)))
                        # for economy we are probe only one chunk in the chunklist
                        if self.conf["mode"]["one-segment"]:
                            break
            except KeyboardInterrupt:
                self.log.info("Finalize cupertino prober %s." % self.pno)


class MediaProbe:
    """ Get and analyze media chunks.
    """
    def __init__(self, conf, chunkq, bugq, pno, log):
        """ Initialized with `conf` configuration object,
        `chunkq` chunk queue, `bugq` bug queue,
        `pno` prober instance number and `log` logger object.
        """
        self.conf = conf
        self.chunkq = chunkq
        self.pno = pno
        self.log = log
        self.loaded = [] # cache list of already loaded chunks
        self.err = ErrContainer(bugq)

    def __call__(self):
        while True:
            try:
                stamp, group, name, uri = self.chunkq.get(True)
                if uri in self.loaded:
                    self.log.debug("Chunk %s for %s %s already loaded." % (uri, group, name))
                    continue
                if time.time() >= stamp + self.conf["timeout"]["target-duration"]:
                    self.log.info("Media probing is very slow. %s (%s) was skiped." % (uri, group))
                    continue
                try:
                    resp = urllib2.urlopen(uri, timeout=self.conf["timeout"]["read"])
                    status = resp.getcode()
                    if status >= 400:
                        self.log.warn("Bad status %s for (%s) %s stream" % (status, group, uri))
                        self.err("status", "stream", group, name, uri, status)
                        continue
                    data = resp.read()
                except urllib2.URLError:
                    self.log.error("Error on read %s of %s %s" % (uri, group, name))
                    self.err("status", "chunk", group, name, uri)
                except socket.timeout:
                    self.log.error("Timeout occurs on read %s of %s %s" % (uri, group, name))
                    self.err("timeout", "chunk", group, name, uri)
                self.log.debug("Probed chunk %s (len %d)" % (uri, len(data)))
                if len(self.loaded) > 96:
                    self.loaded = self.loaded[32:]
            except KeyboardInterrupt:
                self.log.info("Finalize media prober %s." % self.pno)

    def analyze(self):
        """ TODO Analyze with Mediainfo.
        """
        pass


class Source:
    """ Reads config data and puts urls to task queue.
    """
    def __init__(self, conf, playlistq, log):
        """ Initialized with `conf` config dictionary
        `playlistq` playlist queue, and `log` logger object.
        """
        self.conf = conf
        self.playlistq = playlistq
        self.streams = conf["streams"]
        self.log = log
        self.streamlist = []
        self._walk(conf["streams"])
        log.debug("%d stream links loaded." % len(self.streamlist))

    def _walk(self, streams, parent=""):
        """ Recursive walk of `streams` configuration tree.
        """
        if type(streams) == dict:
            for key in streams.keys():
                if parent:
                    parent += "/%s" % key
                else:
                    parent = key
                self._walk(streams[key], parent)
        elif type(streams) == list:
            for val in streams:
                if type(val) == str and val.startswith("http"):
                    self.streamlist.append((parent, val))
                elif type(val) is dict:
                    self._walk(val, parent)
        elif type(streams) == str:
            self.streamlist.append((parent, streams))

    def __call__(self):
        """ Read the channel list and put tasks to playlist queue.
        """
        while True:
            try:
                if self.playlistq.full():
                    self.log.debug("Playlist queue is full (%d). Probably you need to increase number of stream probers. Check `workers/stream-probers` value." % self.playlistq.qsize())
                    time.sleep(3)
                    continue
                group, stream = random.choice(self.streamlist)
                self.playlistq.put((group, stream, stream))
                time.sleep(self.conf["sleep"]["streams-list"])
            except KeyboardInterrupt:
                self.log.info("Exit source parser.")

    def flat(self):
        return self.streamlist


class ErrContainer:
    """ Container for transferring error messages between processes.
    """
    def __init__(self, bugq):
        """ Initialized with `bugq` bug queue and `where` place where error appear.
        """
        self.stamp = 0
        self.bugq = bugq
        self.kind = "other"
        self.objtype = ""
        self.group = ""
        self.stream = ""
        self.uri = ""

    def __call__(self, kind="other", objtype="", group="", stream="", uri="", status=200):
        self.stamp = time.time()
        self.kind = kind
        self.objtype = objtype
        self.group = group
        self.stream = stream
        self.uri = uri
        self.status = status
        self.msg = {"stamp": self.stamp, "kind": kind, "objtype": objtype,
               "group": group, "stream": stream, "uri": uri, "status": status}
        self.bugq.put(self.msg)

    def get(self, msg):
        self.stamp = msg["stamp"]
        self.kind = msg["kind"]
        self.objtype = msg["objtype"]
        self.group = msg["group"]
        self.stream = msg["stream"]
        self.uri = msg["uri"]


class ProblemAnalyzer:
    """ Gather and analyze problems with streams. Log it or send mail on critical incidents.
    Probers generate errors of types: timeout, status, empty, media.
    """
    def __init__(self, conf, bugq, playlistq, chunkq, log):
        """ Initialized with `bugq` bug queue and `log` logger object.
        """
        self.conf = conf
        self.bugq = bugq
        self.playlistq = playlistq
        self.log = log
        self.notify = Notify(conf, log)
        self.err = ErrContainer(bugq)
        self.playlistq = playlistq
        self.chunkq = chunkq
        self.errors = {} # key is (group, stream) and value is (stamp, kind, objtype, uri)
        for val in Source(conf, playlistq, log).flat():
            self.errors[val] = []
        self.msgerrs = {}
        self.last_sent = 0

    def __call__(self):
        nospam = 0
        while True:
            try:
                curtime = time.time()
                try:
                    err = self.bugq.get(timeout=3)
                except:
                    pass
                else:
                    r = open("/tmp/report", "w") # XXX
                    pprint(self.errors, r)
                    r.close()
                    self.err.get(err)
                    for idx, err in enumerate(self.errors[(self.err.group, self.err.stream)]):
                        # Remove old errors
                        if not err["confirmed"] and curtime > err["stamp"] + self.conf["timeout"]["keep-error"]:
                            del self.errors[(self.err.group, self.err.stream)][idx]
                            continue
                        # This error appeared more than once
                        if err["kind"] == self.err.kind and err["objtype"] == self.err.objtype and err["uri"] == self.err.uri:
                            err["count"] += 1
                            err["reported"] = False
                            err["confirmed"] = True
                            self.errors[(self.err.group, self.err.stream)][idx] = err
                            break
                    else:
                        # This is a new error
                        self.errors[(self.err.group, self.err.stream)].append({"stamp": self.err.stamp, "kind": self.err.kind, "objtype": self.err.objtype, "uri": self.err.uri, "count": 0, "reported": False, "confirmed": False})
                        # Double check this error
                        if err["objtype"] == "playlist":
                            self.playlistq.put((self.err.group, self.err.stream, self.err.uri))
                        elif err["objtype"] == "chunk":
                            self.chunkq.put((time.time(), self.err.group, self.err.stream, self.err.uri))
                # Now make report
                for case in self.errors:
                    for idx, err in enumerate(self.errors[case]):
                        # Notify if error has not yet reported
                        if not err["reported"] and err["confirmed"]:
                            err["reported"] = True
                            self.errors[case][idx] = err
                            if case in self.msgerrs:
                                self.msgerrs[case].update({err["uri"]: err})
                            else:
                                self.msgerrs[case] = {err["uri"]: err}
                r = open("/tmp/msgerrs", "w") # XXX
                pprint(self.msgerrs, r)
                r.close()
                # Send notify
                if self.msgerrs and (curtime > self.last_sent + self.conf["timeout"]["spam"]): # XXX
                    msg = "Dear human,\n\n"
                    for case in self.msgerrs:
                        msg += "The stream %s" % case[1]
                        if self.err.group:
                            msg += " of the group %s" % case[0]
                        msg += ":\n"
                        for uri in self.msgerrs[case]:
                            kind = self.msgerrs[case][uri]["kind"]
                            if kind == "status":
                                kind = "bad status %s" % self.msgerrs[case][uri]["status"]
                            elif kind == "empty":
                                kind = "empty body"
                            if self.msgerrs[case][uri]["count"] > 1:
                                msg += "- [%s] %s still persists for" % (time.ctime(self.msgerrs[case][uri]["stamp"]), kind)
                            else:
                                msg += "- [%s] %s detected for" % (time.ctime(self.msgerrs[case][uri]["stamp"]), kind)
                            msg += " %s\n" % uri
                    msg = msg + "\n-- \nFor your service,\nHLS prober,\nthe robot."
                    self.notify.send(msg)
                    self.last_sent = curtime
            except KeyboardInterrupt:
                self.log.info("Exit problem analyzer.")


class Notify:
    """ Send emails if problems detected.
    """
    def __init__(self, conf, log):
        """ Initialized with mail configuration.
        """
        self.subject = conf["notify"]["subject"]
        self.author = conf["notify"]["author"]
        self.to = conf["notify"]["addresses"]
        self.log = log
        self.send("Dear human,\nHLS probe v%s started at %s." % (__version__, time.ctime()), "HLS probe started on $HOSTNAME")

    def subjparse(self, subject):
        return check_output('bash -c "echo %s"' % subject, shell=True).strip()

    def send(self, text, subject=""):
        self.msg = MIMEText(text)
        if not subject:
            subject = self.subject
        self.msg['Subject'] = self.subjparse(subject)
        self.msg['From'] = self.author
        self.msg['To'] = ", ".join(self.to.split(';'))
        self.msg['X-Mailer'] = "HLS Probe v.%s" % __version__
        #print self.msg.as_string()
        mail = smtplib.SMTP("localhost")
        #mail.set_debuglevel(9)
        try:
            mail.sendmail(self.author, self.to.split(';'), self.msg.as_string())
            self.log.info("Mail delivered.")
        except: # SMTPRecipientsRefused:
            self.log.warn("Can't delivery notification!")
        mail.quit()


class Config:
    """ YAML configuration.
    """
    def __init__(self, conf, log):
        """ Initialized with config dictionary and logger object.
        """
        self.conf = conf
        try:
            # TODO apply defaults
            self.cfg = yaml.load(open(os.path.expanduser(conf)).read())
            log.debug("Loaded configuration from the %s." % os.path.expanduser(conf))
        except IOError:
            log.fatal("Can't open config file. Exit.")
            exit(1)
        except yaml.scanner.ScannerError, err:
            log.fatal("Error parsing config: %s" % err)
            exit(1)

    def __call__(self):
        return self.cfg


class FlowController:
    """ Manage all probe-tasks over workers.
    """
    def __init__(self, confile, log):
        self.log = log
        self.slots = []
        conf = Config(confile, log)()
        # Playlistq tasks are lists: (group, stream, uri)
        playlistq = Queue(conf["workers"]["stream-probers"]*90)
        # Chunkq tasks are lists: (timestamp, group, stream, uri)
        chunkq = Queue(conf["workers"]["media-probers"]*240)
        # Bugq tasks are dicts: {"stamp", "kind", "objtype", "group", "stream", "uri"}
        bugq = Queue(conf["workers"]["stream-probers"]*8 + conf["workers"]["media-probers"]*8)
        for i in range(1, conf["workers"]["stream-probers"]):
            self.slots.append(Process(target=CupertinoProbe(conf, playlistq, chunkq, bugq, i, log)))
        log.debug("%d stream probers forked." % conf["workers"]["stream-probers"])
        for i in range(1, conf["workers"]["stream-probers"]):
            self.slots.append(Process(target=MediaProbe(conf, chunkq, bugq, i, log)))
        log.debug("%d media probers forked." % conf["workers"]["media-probers"])
        self.slots.append(Process(target=Source(conf, playlistq, log)))
        self.slots.append(Process(target=ProblemAnalyzer(conf, bugq, playlistq, chunkq, log)))

    def run(self):
        for slot in self.slots:
            slot.start()
        try:
            signal.pause()
        except KeyboardInterrupt:
            for slot in self.slots:
                self.log.info("Exit subprocess %s" % slot.pid)
                time.sleep(0.01)
                slot.terminate()
            self.log.info("Control process %s was interrupted by operator." % os.getpid())


class Logger:
    """ Customizable logging to STDERR.
    """
    def __init__(self, verbose):
        if verbose:
            level = logging.DEBUG
        else:
            level = logging.WARN
        log = logging.getLogger("hlsprobe")
        hdlr = logging.StreamHandler(sys.stderr)
        formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
        hdlr.setFormatter(formatter)
        log.addHandler(hdlr)
        log.setLevel(level)
        self.log = log
        self.last = ""

    def _check_doubles(self, msg):
        if msg == self.last:
            return False
        else:
            self.last = msg
            return True

    def debug(self, msg):
        if self._check_doubles(msg):
            self.log.info(msg)

    def info(self, msg):
        if self._check_doubles(msg):
            self.log.info(msg)

    def warn(self, msg):
        if self._check_doubles(msg):
            self.log.warn(msg)

    def error(self, msg):
        if self._check_doubles(msg):
            self.log.error(msg)

    def fatal(self, msg):
        if self._check_doubles(msg):
            self.log.fatal(msg)


def base_uri(uri):
    parsed_url = urlparse.urlparse(uri)
    prefix = parsed_url.scheme + '://' + parsed_url.netloc
    basepath = os.path.normpath(parsed_url.path + '/..')
    return urlparse.urljoin(prefix, basepath)


def main():
    """ Workflow:
    Source -[playlist url]-> TaskQueue ->>> CupertinoProbe -[chunk url]-> TaskQueue -> MediaProbe [bool]
    """
    cli = optparse.OptionParser()
    cli.add_option("--show-config", action="store_true", dest="show_config", help="Show parsed config (for debug purposes).")
    cli.add_option("-c", "--config", dest="conf", help="Use alternative configuration file.")
    cli.add_option("-v", "--verbose", dest="verbose", action="store_true", help="Show more probing details (for debug purposes).")
    opt, _ = cli.parse_args()
    if opt.conf:
        confile = opt.conf
    else:
        confile = CONFIG
    log = Logger(opt.verbose)
    if opt.show_config:
        pprint(Config(confile, log)())
        exit()
    log.info("HLS Probe v%s started" % __version__)
    flowc = FlowController(confile, log)
    flowc.run()


if __name__ == "__main__":
    main()

# TODO сообщать о проблемах конфигурации в очередь ошибок
